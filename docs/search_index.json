[
["preparing-data-for-analysis.html", "Chapter 1 Preparing Data for Analysis 1.1 A Reproducible Workflow 1.2 Identifying Variable Types 1.3 Data Editing and Recoding 1.4 Outliers", " Chapter 1 Preparing Data for Analysis Just a recap 1.1 A Reproducible Workflow PrepareData You are your own collaborator 6 months from now. Make sure you will be able to understand what you were doing. Investing the time to do things clearly and in a reproducible manner will make your future self happy. Comment your code with explanations and instructions. How did you get from point A to B? Why did you recode this variable in this manner? This is reason #1 we use the Markdown language through R. Repro Figure Credits: Roger Peng 1.2 Identifying Variable Types This section uses the depression data set from Afifi et.al. Consider a variable that measures marital status. What data type does R see this variable as? table(depress$MARITAL) ## ## 1 2 3 4 5 ## 73 127 43 13 38 str(depress$MARITAL) ## int [1:294] 5 3 2 3 4 2 2 1 2 2 ... class(depress$MARITAL) ## [1] &quot;integer&quot; When variables have numerical levels it is necessary to ensure that R knows it is a factor variable. The following code uses the factor() function to take the marital status variable and convert it into a factor variable with specified labels that match the codebook. depress$MARITAL &lt;- factor(depress$MARITAL, labels = c(&quot;Never Married&quot;, &quot;Married&quot;, &quot;Divorced&quot;, &quot;Separated&quot;, &quot;Widowed&quot;)) It is important to confirm the recode worked. If it did not you will have to re-read in the raw data set again since the variable SEX was replaced. table(depress$MARITAL) ## ## Never Married Married Divorced Separated Widowed ## 73 127 43 13 38 class(depress$MARITAL) ## [1] &quot;factor&quot; Create a boxplot of income across marital status category. qplot(y=INCOME, x=MARITAL, data=depress, geom=&quot;boxplot&quot;) Boxplots are nice because they clearly show the range where 50% of the data lie and any potential outliers. Boxplots can also indicate skewness, but sometimes it is helpful to visualize the location of the mean as well as the median. ggplot2 has a nice stat_summary layer that will calculate and add the means to the current plot. qplot(y=INCOME, x=MARITAL, data=depress, geom=&quot;boxplot&quot;) + stat_summary(fun.y=mean, colour=&quot;blue&quot;, size=3, geom=&quot;point&quot;) 1.3 Data Editing and Recoding For unbiased and accurate results of a statistical analysis, sufficient data has to be present. Often times once you start slicing and dicing the data to only look at certain groups, or if you are interested in the behavior of certain variables across levels of another variable, sometimes you start to run into small sample size problems. For example, consider marital status again: table(depress$MARITAL) ## ## Never Married Married Divorced Separated Widowed ## 73 127 43 13 38 There are only 13 people who report being separated. This could potentially be too small of a group size for valid statistical analysis. One way to deal with insufficient data within a certain category is to collapse categories. The following code uses the recode() function from the car package to create a new variable that I am calling MARITAL2 that combines the Divorced and Separated levels. library(car) ## ## Attaching package: &#39;car&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## recode depress$MARITAL2 &lt;- recode(depress$MARITAL, &quot;&#39;Divorced&#39; = &#39;Sep/Div&#39;; &#39;Separated&#39; = &#39;Sep/Div&#39;&quot;) Always confirm your recodes. table(depress$MARITAL, depress$MARITAL2, useNA=&quot;always&quot;) ## ## Married Never Married Sep/Div Widowed &lt;NA&gt; ## Never Married 0 73 0 0 0 ## Married 127 0 0 0 0 ## Divorced 0 0 43 0 0 ## Separated 0 0 13 0 0 ## Widowed 0 0 0 38 0 ## &lt;NA&gt; 0 0 0 0 0 This confirms that records where MARITAL (rows) is Divorced or Separated have the value of Sep/Div for MARITAL2 (columns). Now let’s examine the relationship between income against marital status by creating a boxplot. This is a situation where jittering or dodging the points is helpful to avoid overplotting of points. Note that the full ggplot code had to be used here, not the simpler qplot methods. Furthermore, the grid.arrange function from the gridExtra package is used to display these plots side by side. library(gridExtra) ## ## Attaching package: &#39;gridExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine a &lt;- qplot(x=MARITAL2, y=INCOME, data=depress, col=MARITAL2, geom=&quot;point&quot;, main = &quot;Without jittering&quot;) + coord_flip() + theme(legend.position=&quot;none&quot;) b &lt;- ggplot(depress, aes(x=INCOME, y=MARITAL2, color=MARITAL2), main=&quot;With jittering&quot;) + geom_point(position=position_jitter()) + theme(legend.position=&quot;none&quot;) grid.arrange(a, b, ncol=2) What do you think coord_flip() does? Look at the difference in the X and Y values between plot a and plot b. What do you think theme(legend.position=&quot;none&quot;) does? Hint: Try removing them and see what happens. What can you say about the relationship between Income and marital status? 1.4 Outliers Let’s look at the age variable in the depression data set. par(mfrow=c(1,2)) boxplot(depress$AGE) hist(depress$AGE) Just looking at the data graphically raises no red flags. The boxplot shows no outlying values and the histogram does not look wildly skewed. This is where knowledge about the data set is essential. The codebook does not provide a valid range for the data, but the description of the data starting on page 3 in the textbook clarifies that this data set is on adults. In the research world, this specifies 18 years or older. Now look back at the graphics. See anything odd? It appears as if the data go pretty far below 20, possibly below 18. Let’s check the numerical summary to get more details. summary(depress$AGE) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 9.00 28.00 42.50 44.38 59.00 89.00 The minimum value is a 9, which is outside the range of valid values for this variable. This is where you, as a statistician, data analyst or researcher goes back to the PI and asks for advice. Should this data be set to missing, or edited in a way that changes this data point into a valid piece of data. As an example of a common data entry error, and for demonstration purposes, I went in and changed a 19 to a 9. So the correct thing to do here is to change that 9, back to a 19. This is a very good use of the ifelse() function. depress$AGE &lt;- ifelse(depress$AGE==9, 19, depress$AGE) The logical statement is depress$AGE==9. Wherever this is true, replace the value of depress$AGE with 19, wherever this is false then keep the value of depress$AGE unchanged (by “replacing” the new value with the same old value). Alternatively, you can change that one value using bracket notation. Here you are specifying that you only want the rows where AGE==9, and directly assign a value of 19 to those rows. depress$AGE[depress$AGE==9] &lt;- 19 Confirm the recode. summary(depress$AGE) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 18.00 28.00 42.50 44.41 59.00 89.00 Looks like it worked. "]
]
